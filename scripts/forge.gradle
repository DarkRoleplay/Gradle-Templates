

//Mixin tracker
def hasMixin = getDefaultProperty('enable_mixin', false).asBoolean()

// Configurable Forge Properties
def forgeVersion = getRequiredString('forge_version')
def loggingLevel = getDefaultString('forge_log_level', 'debug')
def loggingANSI = getDefaultProperty('forge_log_ansi', true).asBoolean()
def mappingChannel = getDefaultString('forge_mapping_channel', 'official')
def mappingVersion = getDefaultString('forge_mapping_version', project.ext.mcVersion)

archivesBaseName = "${mod_name}-${minecraft_version}"
java.toolchain.languageVersion = JavaLanguageVersion.of(16)

if(hasMixin){
	mixin {
    add sourceSets.main, project.ext.modId + ".refmap.json"
	}
}

minecraft {
	mappings channel: mappingChannel, version: mappingVersion

	runs {
		client {
			workingDirectory project.file('runs/client')
			taskName modName.replaceAll("\\s","") + 'Client'

			property 'forge.logging.console.level', loggingLevel
			if(loggingANSI)
				property 'terminal.ansi', 'true'
	
			if(hasMixin)
				arg "--mixin=" + project.ext.modId + ".mixins.json"

			mods {
				clientRun {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('runs/server')
			taskName modName.replaceAll("\\s","") + 'Server'

			property 'forge.logging.console.level', loggingLevel
			if(loggingANSI)
					property 'terminal.ansi', 'true'

			if(hasMixin)
				arg "--mixin=" + project.ext.modId + ".mixins.json"

			mods {
				serverRun {
					source sourceSets.main
				}
			}
		}
	}
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.ext.mcVersion}-${forgeVersion}"
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs){
        filesMatching(['META-INF/mods.toml', 'pack.mcmeta']){
            expand project.properties
        }
    }
}

jar {
    manifest {
        attributes([
					'ModLoader': "forge-${forgeVersion}",
					if(hasMixin)
						"MixinConfigs":  project.ext.modId + ".mixins.json"
				])
    }
}

//Tasks are renamed, third party tools may require those
task runClient() {
    description = 'Runs the game client in developer/debug mode.'
    dependsOn modName.replaceAll("\\s","") + 'Client'
}

task runServer() {
    description = 'Runs the game server in developer/debug mode.'
    dependsOn modName.replaceAll("\\s","") + 'Server'
}